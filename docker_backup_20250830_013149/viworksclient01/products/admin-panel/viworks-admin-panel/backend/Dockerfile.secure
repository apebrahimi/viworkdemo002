# Multi-stage build with Alpine-based images for better security
# Build stage
FROM rust:1.89.0-alpine as builder

# Install build dependencies
RUN apk add --no-cache \
    pkgconfig \
    openssl-dev \
    postgresql-dev \
    musl-dev \
    gcc

WORKDIR /app

# Copy Cargo files first for better caching
COPY Cargo.toml Cargo.lock* ./

# Create a dummy main.rs to build dependencies
RUN mkdir src && echo "fn main() {}" > src/main.rs

# Build dependencies
RUN cargo build --release

# Remove dummy main.rs and copy real source
RUN rm src/main.rs
COPY src ./src

# Build the application
RUN cargo build --release

# Production stage - Use Alpine for minimal attack surface
FROM alpine:3.22 as production

# Install runtime dependencies
RUN apk add --no-cache \
    ca-certificates \
    libpq \
    dumb-init \
    && update-ca-certificates

# Create non-root user for security
RUN addgroup -g 1001 -S appgroup && \
    adduser -u 1001 -S appuser -G appgroup

WORKDIR /app

# Copy the binary from builder stage
COPY --from=builder /app/target/release/viworks-admin-backend /app/viworks-admin-backend

# Change ownership to non-root user
RUN chown appuser:appgroup /app/viworks-admin-backend

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:8080/health || exit 1

# Use dumb-init for proper signal handling
ENTRYPOINT ["dumb-init", "--"]
CMD ["/app/viworks-admin-backend"]
