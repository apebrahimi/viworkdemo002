name: Deploy Website to DigitalOcean

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  DOCKER_REGISTRY: registry.digitalocean.com
  IMAGE_NAME: viworks-website

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Build application
        run: npm run build

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DigitalOcean Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.DOCKER_REGISTRY }}
          username: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
          password: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ secrets.DIGITALOCEAN_PROJECT_NAME }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.DOCKER_REGISTRY }}/${{ secrets.DIGITALOCEAN_PROJECT_NAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to DigitalOcean Droplet
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: ${{ secrets.DROPLET_USERNAME }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          script: |
            # Pull the latest image
            docker pull ${{ env.DOCKER_REGISTRY }}/${{ secrets.DIGITALOCEAN_PROJECT_NAME }}/${{ env.IMAGE_NAME }}:latest
            
            # Stop and remove old container
            docker stop viworks-website || true
            docker rm viworks-website || true
            
            # Run new container
            docker run -d \
              --name viworks-website \
              --restart unless-stopped \
              --network viworks-public \
              -p 3000:3000 \
              -e NODE_ENV=production \
              ${{ env.DOCKER_REGISTRY }}/${{ secrets.DIGITALOCEAN_PROJECT_NAME }}/${{ env.IMAGE_NAME }}:latest
            
            # Clean up old images
            docker image prune -f

      - name: Health check
        run: |
          sleep 30
          curl -f http://${{ secrets.DROPLET_HOST }}:3000 || exit 1
