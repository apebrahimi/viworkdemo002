name: üöÄ Sequential ViWorks Deployment

on:
  workflow_dispatch:
    inputs:
      phase:
        description: 'Deployment Phase'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - infrastructure
        - core-services
        - backend
        - frontend
        - website
        - agent
      skip_tests:
        description: 'Skip health checks'
        required: false
        default: false
        type: boolean

env:
  DROPLET_IP: ${{ secrets.DROPLET_IP }}
  DROPLET_USER: ${{ secrets.DROPLET_USER }}

jobs:
  # Phase 1: Infrastructure (Networks + PostgreSQL + Redis)
  deploy-infrastructure:
    if: ${{ github.event.inputs.phase == 'all' || github.event.inputs.phase == 'infrastructure' }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: üîß Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519
        ssh-keyscan -H ${{ env.DROPLET_IP }} >> ~/.ssh/known_hosts

    - name: Phase 1: Deploy Infrastructure
      run: |
        cat > deploy-phase1.sh << 'EOF'
        #!/bin/bash
        set -e
        echo "üèóÔ∏è Phase 1: Infrastructure Deployment"
        echo "üìÖ Started at: $(date)"
        
        cd /root/viworks-repo
        
        # Clean up and update
        git fetch origin
        git reset --hard origin/main
        cd "digital ocean docker"
        
        # Stop and clean everything first
        echo "üõë Stopping existing containers..."
        docker-compose down --remove-orphans || true
        
        # Create networks
        echo "üåê Creating networks..."
        docker network create --driver bridge viworks-public 2>/dev/null || echo "Network viworks-public already exists"
        docker network create --driver bridge --internal viworks-internal 2>/dev/null || echo "Network viworks-internal already exists"
        
        # Start only infrastructure services
        echo "üóÑÔ∏è Starting PostgreSQL..."
        docker-compose up -d postgres
        
        # Wait for PostgreSQL
        echo "‚è≥ Waiting for PostgreSQL to be ready..."
        for i in {1..30}; do
          if docker-compose exec -T postgres pg_isready -U admin -d viworks; then
            echo "‚úÖ PostgreSQL is ready"
            break
          fi
          echo "‚è≥ PostgreSQL not ready yet... ($i/30)"
          sleep 5
        done
        
        echo "üî¥ Starting Redis..."
        docker-compose up -d redis
        
        # Wait for Redis
        echo "‚è≥ Waiting for Redis to be ready..."
        for i in {1..15}; do
          if docker-compose exec -T redis redis-cli ping | grep -q PONG; then
            echo "‚úÖ Redis is ready"
            break
          fi
          echo "‚è≥ Redis not ready yet... ($i/15)"
          sleep 3
        done
        
        echo "‚úÖ Phase 1 Complete: Infrastructure is running"
        docker-compose ps
        EOF
        
        scp -i ~/.ssh/id_ed25519 deploy-phase1.sh ${DROPLET_USER}@${DROPLET_IP}:/tmp/
        ssh -i ~/.ssh/id_ed25519 ${DROPLET_USER}@${DROPLET_IP} "chmod +x /tmp/deploy-phase1.sh && /tmp/deploy-phase1.sh"

    - name: üß™ Validate Infrastructure
      if: ${{ !github.event.inputs.skip_tests }}
      run: |
        ssh -i ~/.ssh/id_ed25519 ${DROPLET_USER}@${DROPLET_IP} "
          cd /root/viworks-repo/'digital ocean docker'
          echo 'üß™ Testing PostgreSQL connection...'
          docker-compose exec -T postgres psql -U admin -d viworks -c 'SELECT version();' || exit 1
          echo 'üß™ Testing Redis connection...'
          docker-compose exec -T redis redis-cli ping || exit 1
          echo '‚úÖ Infrastructure validation passed'
        "

  # Phase 2: Backend API
  deploy-backend:
    needs: deploy-infrastructure
    if: ${{ always() && (needs.deploy-infrastructure.result == 'success' || github.event.inputs.phase == 'backend') }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: üîß Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519
        ssh-keyscan -H ${{ env.DROPLET_IP }} >> ~/.ssh/known_hosts

    - name: ü¶Ä Phase 2: Deploy Backend
      run: |
        cat > deploy-phase2.sh << 'EOF'
        #!/bin/bash
        set -e
        echo "ü¶Ä Phase 2: Backend Deployment"
        echo "üìÖ Started at: $(date)"
        
        cd /root/viworks-repo
        git fetch origin
        git reset --hard origin/main
        cd "digital ocean docker"
        
        # Build and start backend
        echo "üî® Building backend..."
        docker-compose build backend
        
        echo "üöÄ Starting backend..."
        docker-compose up -d backend
        
        # Wait for backend health
        echo "‚è≥ Waiting for backend to be healthy..."
        for i in {1..60}; do
          if docker-compose exec -T backend curl -f -s http://localhost:8081/health > /dev/null 2>&1; then
            echo "‚úÖ Backend is healthy"
            break
          fi
          echo "‚è≥ Backend not ready yet... ($i/60)"
          sleep 5
        done
        
        echo "‚úÖ Phase 2 Complete: Backend is running"
        docker-compose logs --tail=10 backend
        EOF
        
        scp -i ~/.ssh/id_ed25519 deploy-phase2.sh ${DROPLET_USER}@${DROPLET_IP}:/tmp/
        ssh -i ~/.ssh/id_ed25519 ${DROPLET_USER}@${DROPLET_IP} "chmod +x /tmp/deploy-phase2.sh && /tmp/deploy-phase2.sh"

    - name: üß™ Validate Backend
      if: ${{ !github.event.inputs.skip_tests }}
      run: |
        ssh -i ~/.ssh/id_ed25519 ${DROPLET_USER}@${DROPLET_IP} "
          cd /root/viworks-repo/'digital ocean docker'
          echo 'üß™ Testing backend health endpoint...'
          docker-compose exec -T backend curl -f http://localhost:8081/health || exit 1
          echo 'üß™ Testing backend database connection...'
          docker-compose logs backend | grep -q 'Database connected successfully' || exit 1
          echo '‚úÖ Backend validation passed'
        "

  # Phase 3: Frontend
  deploy-frontend:
    needs: deploy-backend
    if: ${{ always() && (needs.deploy-backend.result == 'success' || github.event.inputs.phase == 'frontend') }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: üîß Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519
        ssh-keyscan -H ${{ env.DROPLET_IP }} >> ~/.ssh/known_hosts

    - name: Phase 3: Deploy Frontend
      run: |
        cat > deploy-phase3.sh << 'EOF'
        #!/bin/bash
        set -e
        echo "‚öõÔ∏è Phase 3: Frontend Deployment"
        echo "üìÖ Started at: $(date)"
        
        cd /root/viworks-repo
        git fetch origin
        git reset --hard origin/main
        cd "digital ocean docker"
        
        # Build and start frontend
        echo "üî® Building frontend..."
        docker-compose build frontend
        
        echo "üöÄ Starting frontend..."
        docker-compose up -d frontend
        
        # Wait for frontend health
        echo "‚è≥ Waiting for frontend to be ready..."
        for i in {1..60}; do
          if docker-compose exec -T frontend curl -f -s http://localhost:3000 > /dev/null 2>&1; then
            echo "‚úÖ Frontend is ready"
            break
          fi
          echo "‚è≥ Frontend not ready yet... ($i/60)"
          sleep 5
        done
        
        echo "‚úÖ Phase 3 Complete: Frontend is running"
        docker-compose logs --tail=10 frontend
        EOF
        
        scp -i ~/.ssh/id_ed25519 deploy-phase3.sh ${DROPLET_USER}@${DROPLET_IP}:/tmp/
        ssh -i ~/.ssh/id_ed25519 ${DROPLET_USER}@${DROPLET_IP} "chmod +x /tmp/deploy-phase3.sh && /tmp/deploy-phase3.sh"

    - name: üß™ Validate Frontend
      if: ${{ !github.event.inputs.skip_tests }}
      run: |
        ssh -i ~/.ssh/id_ed25519 ${DROPLET_USER}@${DROPLET_IP} "
          cd /root/viworks-repo/'digital ocean docker'
          echo 'üß™ Testing frontend health...'
          docker-compose exec -T frontend curl -f http://localhost:3000 || exit 1
          echo '‚úÖ Frontend validation passed'
        "

  # Phase 4: Website
  deploy-website:
    needs: deploy-frontend
    if: ${{ always() && (needs.deploy-frontend.result == 'success' || github.event.inputs.phase == 'website') }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: üîß Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519
        ssh-keyscan -H ${{ env.DROPLET_IP }} >> ~/.ssh/known_hosts

    - name: Phase 4: Deploy Website
      run: |
        cat > deploy-phase4.sh << 'EOF'
        #!/bin/bash
        set -e
        echo "üåê Phase 4: Website Deployment"
        echo "üìÖ Started at: $(date)"
        
        cd /root/viworks-repo
        git fetch origin
        git reset --hard origin/main
        cd "digital ocean docker"
        
        # Build and start website
        echo "üî® Building website..."
        docker-compose build website
        
        echo "üöÄ Starting website..."
        docker-compose up -d website
        
        # Wait for website health
        echo "‚è≥ Waiting for website to be ready..."
        for i in {1..60}; do
          if docker-compose exec -T website curl -f -s http://localhost:3000 > /dev/null 2>&1; then
            echo "‚úÖ Website is ready"
            break
          fi
          echo "‚è≥ Website not ready yet... ($i/60)"
          sleep 5
        done
        
        echo "‚úÖ Phase 4 Complete: Website is running"
        docker-compose logs --tail=10 website
        EOF
        
        scp -i ~/.ssh/id_ed25519 deploy-phase4.sh ${DROPLET_USER}@${DROPLET_IP}:/tmp/
        ssh -i ~/.ssh/id_ed25519 ${DROPLET_USER}@${DROPLET_IP} "chmod +x /tmp/deploy-phase4.sh && /tmp/deploy-phase4.sh"

    - name: üß™ Validate Website
      if: ${{ !github.event.inputs.skip_tests }}
      run: |
        ssh -i ~/.ssh/id_ed25519 ${DROPLET_USER}@${DROPLET_IP} "
          cd /root/viworks-repo/'digital ocean docker'
          echo 'üß™ Testing website health...'
          docker-compose exec -T website curl -f http://localhost:3000 || exit 1
          echo '‚úÖ Website validation passed'
        "

  # Phase 5: Agent
  deploy-agent:
    needs: deploy-website
    if: ${{ always() && (needs.deploy-website.result == 'success' || github.event.inputs.phase == 'agent') }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: üîß Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519
        ssh-keyscan -H ${{ env.DROPLET_IP }} >> ~/.ssh/known_hosts

    - name: ü§ñ Phase 5: Deploy Agent
      run: |
        cat > deploy-phase5.sh << 'EOF'
        #!/bin/bash
        set -e
        echo "ü§ñ Phase 5: Agent Deployment"
        echo "üìÖ Started at: $(date)"
        
        cd /root/viworks-repo
        git fetch origin
        git reset --hard origin/main
        cd "digital ocean docker"
        
        # Build and start agent
        echo "üî® Building agent..."
        docker-compose build agent
        
        echo "üöÄ Starting agent..."
        docker-compose up -d agent
        
        # Wait for agent to start (no HTTP endpoint, just check logs)
        echo "‚è≥ Waiting for agent to start..."
        sleep 10
        
        echo "‚úÖ Phase 5 Complete: Agent is running"
        docker-compose logs --tail=10 agent
        EOF
        
        scp -i ~/.ssh/id_ed25519 deploy-phase5.sh ${DROPLET_USER}@${DROPLET_IP}:/tmp/
        ssh -i ~/.ssh/id_ed25519 ${DROPLET_USER}@${DROPLET_IP} "chmod +x /tmp/deploy-phase5.sh && /tmp/deploy-phase5.sh"

    - name: üß™ Validate Agent
      if: ${{ !github.event.inputs.skip_tests }}
      run: |
        ssh -i ~/.ssh/id_ed25519 ${DROPLET_USER}@${DROPLET_IP} "
          cd /root/viworks-repo/'digital ocean docker'
          echo 'üß™ Testing agent is running...'
          docker-compose ps agent | grep -q 'Up' || exit 1
          echo '‚úÖ Agent validation passed'
        "

  # Phase 6: Nginx (Final)
  deploy-nginx:
    needs: deploy-agent
    if: ${{ always() && (needs.deploy-agent.result == 'success' || github.event.inputs.phase == 'all') }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: üîß Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519
        ssh-keyscan -H ${{ env.DROPLET_IP }} >> ~/.ssh/known_hosts

    - name: Phase 6: Deploy Nginx & Final Setup
      run: |
        cat > deploy-phase6.sh << 'EOF'
        #!/bin/bash
        set -e
        echo "üåê Phase 6: Nginx & Final Setup"
        echo "üìÖ Started at: $(date)"
        
        cd /root/viworks-repo
        git fetch origin
        git reset --hard origin/main
        cd "digital ocean docker"
        
        # Start nginx
        echo "üî® Starting Nginx..."
        docker-compose up -d nginx
        
        # Wait for nginx
        echo "‚è≥ Waiting for Nginx to be ready..."
        for i in {1..30}; do
          if curl -f -s http://localhost/health > /dev/null 2>&1; then
            echo "‚úÖ Nginx is ready"
            break
          fi
          echo "‚è≥ Nginx not ready yet... ($i/30)"
          sleep 3
        done
        
        echo "‚úÖ Phase 6 Complete: Full stack is running!"
        echo ""
        echo "üìä Final Status:"
        docker-compose ps
        echo ""
        echo "üß™ Testing all endpoints through Nginx:"
        curl -s http://localhost/health || echo "‚ùå Backend health check failed"
        curl -s http://localhost/ || echo "‚ùå Frontend failed"
        echo ""
        echo "üéâ Deployment Complete!"
        EOF
        
        scp -i ~/.ssh/id_ed25519 deploy-phase6.sh ${DROPLET_USER}@${DROPLET_IP}:/tmp/
        ssh -i ~/.ssh/id_ed25519 ${DROPLET_USER}@${DROPLET_IP} "chmod +x /tmp/deploy-phase6.sh && /tmp/deploy-phase6.sh"

    - name: üéâ Final Validation
      if: ${{ !github.event.inputs.skip_tests }}
      run: |
        ssh -i ~/.ssh/id_ed25519 ${DROPLET_USER}@${DROPLET_IP} "
          echo 'üß™ Final end-to-end testing...'
          curl -f http://localhost/health || exit 1
          curl -f http://localhost/ || exit 1
          echo 'üéâ All services are running and accessible!'
        "
