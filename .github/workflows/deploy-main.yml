name: Deploy ViWorks to DigitalOcean

# Trigger CI/CD deployment pipeline - re-run deployment
on:
  push:
    branches: [ main, master ]
  workflow_dispatch: # Allow manual trigger

env:
  DROPLET_IP: ${{ secrets.DROPLET_IP }}
  DROPLET_USER: ${{ secrets.DROPLET_USER }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H $DROPLET_IP >> ~/.ssh/known_hosts
          ssh-keyscan -H github.com >> ~/.ssh/known_hosts
          
      - name: Test SSH connection
        run: |
          ssh -o ConnectTimeout=10 -i ~/.ssh/id_ed25519 ${DROPLET_USER}@${DROPLET_IP} "echo 'SSH connection test successful'"
          
      - name: Create improved deployment script
        run: |
          cat > deploy.sh << 'EOF'
          #!/bin/bash
          set -e
          
          APP_DIR="/opt/viworks"
          
          echo "🚀 Starting ViWorks Automated Deployment..."
          echo "📅 Deployment started at: $(date)"
          
          # Navigate to app directory
          cd $APP_DIR
          
          # Function to check if container exists
          container_exists() {
              docker ps -a --format 'table {{.Names}}' | grep -q "^$1$"
          }
          
          # Function to remove container if it exists
          remove_container() {
              if container_exists "$1"; then
                  echo "🗑️  Removing existing container: $1"
                  docker rm -f "$1" || true
              fi
          }
          
          # Function to check service health
          check_service_health() {
              local service=$1
              local max_attempts=30
              local attempt=1
              
              echo "🔍 Checking $service health..."
              while [ $attempt -le $max_attempts ]; do
                  if docker-compose ps | grep -q "$service.*Up"; then
                      echo "✅ $service is healthy"
                      return 0
                  fi
                  echo "⏳ Waiting for $service to be healthy... ($attempt/$max_attempts)"
                  sleep 5
                  attempt=$((attempt + 1))
              done
              
              echo "❌ $service failed to become healthy"
              return 1
          }
          
          # Stop all containers gracefully first
          echo "🛑 Stopping all containers gracefully..."
          cd "digital ocean docker"
          docker-compose down --timeout 30 || true
          
          # Force stop any running containers with our names
          echo "🛑 Force stopping any running containers..."
          docker stop viworks-backend viworks-frontend viworks-postgres viworks-redis 2>/dev/null || true
          
          # Remove containers with our specific names
          echo "🧹 Removing containers with specific names..."
          remove_container "viworks-backend"
          remove_container "viworks-frontend"
          remove_container "viworks-postgres"
          remove_container "viworks-redis"
          
          # Remove any orphaned containers
          echo "🧹 Removing orphaned containers..."
          docker-compose down --remove-orphans || true
          
          # Clean up images
          echo "🧹 Cleaning up Docker images..."
          docker image prune -f
          docker image prune -a -f
          
          # Clean up networks
          echo "🧹 Cleaning up unused networks..."
          docker network prune -f || true
          
          # Verify no conflicting containers exist
          echo "🔍 Verifying no conflicting containers exist..."
          if container_exists "viworks-backend" || container_exists "viworks-frontend" || container_exists "viworks-postgres" || container_exists "viworks-redis"; then
              echo "❌ Error: Conflicting containers still exist. Manual cleanup required."
              docker ps -a | grep viworks
              exit 1
          fi
          
          # Navigate back to app directory for git operations
          cd $APP_DIR
          
          # Clean up any existing files and reset git
          echo "🧹 Cleaning up and resetting git repository..."
          git fetch origin
          git reset --hard origin/main || git reset --hard origin/master
          git clean -fd
          
          # Update origin to point to new repository using SSH
          echo "🔗 Updating repository remote to new location..."
          git remote set-url origin git@github.com:shaiannazari/viworksolution.git
          
          # Fetch from new repository and reset to it
          echo "🔄 Fetching from new repository..."
          git fetch origin
          git reset --hard origin/main
          
          # Navigate to the clean docker setup
          cd "digital ocean docker"
          
          # Ensure networks exist for two-network architecture
          echo "🌐 Setting up two-network security architecture..."
          docker network create --driver bridge viworks-public 2>/dev/null || echo "Network viworks-public already exists"
          docker network create --driver bridge --internal viworks-internal 2>/dev/null || echo "Network viworks-internal already exists"
          
          # Build and start new containers with two-network setup
          echo "🔨 Building and starting new containers with two-network security..."
          docker-compose up -d --build --force-recreate
          
          # Wait for services to be ready with better error handling
          echo "⏳ Waiting for services to be ready..."
          for i in {1..60}; do
              if docker-compose ps | grep -q "Up"; then
                  echo "✅ Services are starting up..."
                  break
              fi
              echo "⏳ Waiting for services to start... ($i/60)"
              sleep 5
          done
          
          # Check individual service health
          echo "🔍 Checking individual service health..."
          check_service_health "postgres" || exit 1
          check_service_health "redis" || exit 1
          check_service_health "backend" || exit 1
          check_service_health "frontend" || exit 1
          check_service_health "nginx" || echo "⚠️  Nginx not found (may be running separately)"
          
          # Check service status
          echo "📊 Checking service status..."
          docker-compose ps
          
                    # Test endpoints with retries (through nginx proxy)
          echo "🧪 Testing endpoints through nginx proxy..."
          for endpoint in "http://localhost:3000" "http://localhost:8081/health"; do
              echo "Testing $endpoint..."
              for i in {1..10}; do
                  if curl -f -s "$endpoint" > /dev/null; then
                      echo "✅ $endpoint is responding"
                      break
                  else
                      echo "⏳ $endpoint not ready yet... ($i/10)"
                      sleep 5
                  fi
              done
          done
          
          # Test nginx proxy endpoints if nginx is running
          echo "🧪 Testing nginx proxy endpoints..."
          if docker ps | grep -q "viworks-nginx"; then
              echo "Testing nginx proxy..."
              for i in {1..10}; do
                  if curl -f -s "http://localhost/health" > /dev/null; then
                      echo "✅ Nginx proxy is responding"
                      break
                  else
                      echo "⏳ Nginx not ready yet... ($i/10)"
                      sleep 5
                  fi
              done
          fi
          
          # Additional backend-specific tests
          echo "🔍 Running backend-specific tests..."
          echo "Testing database connection..."
          docker exec viworks-backend pg_isready -h postgres -p 5432 -U admin && echo "✅ Database connection OK" || echo "❌ Database connection failed"
          
          echo "Testing Redis connection..."
          docker exec viworks-backend redis-cli -h redis ping && echo "✅ Redis connection OK" || echo "❌ Redis connection failed"
          
          echo "Testing backend API endpoints..."
          curl -f http://localhost:8081/health && echo "✅ Backend health check passed" || echo "❌ Backend health check failed"
          
          # Check resource usage
          echo "📊 Checking resource usage..."
          docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.MemPerc}}" | grep viworks || echo "No viworks containers found"
          
          # Show logs for debugging
          echo ""
          echo "📋 Recent logs (last 20 lines each):"
          echo "Backend logs:"
          docker-compose logs --tail=20 backend || true
          echo ""
          echo "PostgreSQL logs:"
          docker-compose logs --tail=20 postgres || true
          echo ""
          echo "Redis logs:"
          docker-compose logs --tail=20 redis || true
          
          echo "✅ Deployment completed successfully!"
          echo "📅 Deployment completed at: $(date)"
          echo ""
          echo "🌐 Services are now running:"
          echo "   Frontend: http://localhost:3000"
          echo "   Backend:  http://localhost:8081"
          echo "   Health:   http://localhost:8081/health"
          echo "   WebSocket: ws://localhost:8081/ws"
          echo ""
          echo "🔒 Security Status:"
          echo "   ✅ Two-network security architecture active"
          echo "   ✅ Public network: nginx only (ports 80/443)"
          echo "   ✅ Internal network: all services isolated"
          echo "   ✅ Containers running as non-root users"
          echo "   ✅ Network isolation implemented"
          echo "   ✅ Health checks active"
          echo "   ✅ Resource limits applied"
          echo ""
          echo "📊 Container status:"
          docker-compose ps
          EOF
          
          chmod +x deploy.sh
          
      - name: Copy SSH key to server for git operations
        run: |
          scp -i ~/.ssh/id_ed25519 ~/.ssh/id_ed25519 ${DROPLET_USER}@${DROPLET_IP}:/tmp/github_ssh_key
          ssh -i ~/.ssh/id_ed25519 ${DROPLET_USER}@${DROPLET_IP} "
            mkdir -p ~/.ssh
            cp /tmp/github_ssh_key ~/.ssh/id_ed25519
            chmod 600 ~/.ssh/id_ed25519
            ssh-keyscan -H github.com >> ~/.ssh/known_hosts
            rm /tmp/github_ssh_key
          "
          
      - name: Upload and execute deployment script
        run: |
          scp -i ~/.ssh/id_ed25519 deploy.sh ${DROPLET_USER}@${DROPLET_IP}:/tmp/
          ssh -i ~/.ssh/id_ed25519 ${DROPLET_USER}@${DROPLET_IP} "chmod +x /tmp/deploy.sh && /tmp/deploy.sh"
          
      - name: Verify deployment
        run: |
          echo "🔍 Verifying deployment..."
          sleep 20
          
          # Test main endpoints with retries
          echo "Testing frontend..."
          for i in {1..5}; do
              if curl -f -s http://${DROPLET_IP}:3000 > /dev/null; then
                  echo "✅ Frontend is responding"
                  break
              else
                  echo "⏳ Frontend not ready yet... ($i/5)"
                  sleep 10
              fi
          done
          
          echo "Testing backend health..."
          for i in {1..5}; do
              if curl -f -s http://${DROPLET_IP}:8081/health > /dev/null; then
                  echo "✅ Backend health check passed"
                  break
              else
                  echo "⏳ Backend not ready yet... ($i/5)"
                  sleep 10
              fi
          done
          
          echo "✅ Deployment verification completed!"
          
      - name: Notify deployment status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "🎉 Deployment successful! Your application is now live."
            echo "🌐 Frontend: http://${DROPLET_IP}:3000"
            echo "🔧 Backend: http://${DROPLET_IP}:8081"
            echo "📊 Health: http://${DROPLET_IP}:8081/health"
            echo "🔗 Website: https://viworks.neuratalent.com"
            echo "🔗 Admin: https://admin-viworks.neuratalent.com"
            echo "🔗 API: https://api-viworks.neuratalent.com"
            echo "🔒 Backend Status: ✅ Secure and Healthy"
          else
            echo "❌ Deployment failed. Check the logs above for details."
            echo "🔧 Manual troubleshooting may be required on the server."
            echo "🔍 Run './check-backend-status.sh' on the server for diagnostics."
          fi
