version: '3.8'

services:
  # PostgreSQL Database (Production)
  postgres:
    image: postgres:15-alpine
    container_name: viworks_postgres_prod
    environment:
      POSTGRES_DB: viworks_admin
      POSTGRES_USER: ${POSTGRES_USER:-viworks_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_change_me}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
      - ./backups:/backups
    ports:
      - "127.0.0.1:5432:5432"  # Only bind to localhost for security
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-viworks_user}"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - viworks_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Redis Cache (Production)
  redis:
    image: redis:7-alpine
    container_name: viworks_redis_prod
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-secure_redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "127.0.0.1:6379:6379"  # Only bind to localhost for security
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-secure_redis_password}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - viworks_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # ViWorkS Admin Panel Backend (Production)
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        RUST_ENV: production
    container_name: viworks_backend_prod
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-viworks_user}:${POSTGRES_PASSWORD:-secure_password_change_me}@postgres:5432/viworks_admin
      - REDIS_URL=redis://:${REDIS_PASSWORD:-secure_redis_password}@redis:6379
      - RUST_ENV=production
      - RUST_LOG=info
      - HOST=0.0.0.0
      - PORT=8080
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-change-this-in-production}
      - JWT_EXPIRATION=${JWT_EXPIRATION:-3600}
      - BCRYPT_COST=${BCRYPT_COST:-12}
      - MAX_LOGIN_ATTEMPTS=${MAX_LOGIN_ATTEMPTS:-5}
      - SESSION_TIMEOUT_MINUTES=${SESSION_TIMEOUT_MINUTES:-60}
    ports:
      - "127.0.0.1:8080:8080"  # Only bind to localhost for security
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./backups:/app/backups
    networks:
      - viworks_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: viworks_nginx_prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - backend
    networks:
      - viworks_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: viworks_backup
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=viworks_admin
      - POSTGRES_USER=${POSTGRES_USER:-viworks_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-secure_password_change_me}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    depends_on:
      - postgres
    networks:
      - viworks_network
    restart: "no"
    profiles:
      - backup
    command: ["/backup.sh"]

  # Monitoring Service (Optional)
  monitoring:
    image: prom/prometheus:latest
    container_name: viworks_monitoring
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - viworks_network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local

networks:
  viworks_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
