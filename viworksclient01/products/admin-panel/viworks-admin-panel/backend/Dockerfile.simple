# Simple test version
FROM rustlang/rust:nightly-slim as builder

# Install system dependencies
RUN apt-get update && apt-get install -y \
    pkg-config \
    libssl-dev \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy dependency files
COPY Cargo.toml ./

# Create a simple main.rs for testing
RUN echo 'use actix_web::{App, HttpServer, web, HttpResponse};' > src/main.rs && \
    echo 'use tracing::{info};' >> src/main.rs && \
    echo 'use tracing_subscriber::{layer::SubscriberExt, util::SubscriberInitExt};' >> src/main.rs && \
    echo '' >> src/main.rs && \
    echo '#[actix_web::main]' >> src/main.rs && \
    echo 'async fn main() -> std::io::Result<()> {' >> src/main.rs && \
    echo '    tracing_subscriber::registry()' >> src/main.rs && \
    echo '        .with(tracing_subscriber::EnvFilter::new(' >> src/main.rs && \
    echo '            std::env::var("RUST_LOG").unwrap_or_else(|_| "info".into()),' >> src/main.rs && \
    echo '        ))' >> src/main.rs && \
    echo '        .with(tracing_subscriber::fmt::layer())' >> src/main.rs && \
    echo '        .init();' >> src/main.rs && \
    echo '' >> src/main.rs && \
    echo '    info!("🚀 Starting Simple Test Server");' >> src/main.rs && \
    echo '' >> src/main.rs && \
    echo '    let host = std::env::var("HOST").unwrap_or_else(|_| "0.0.0.0".to_string());' >> src/main.rs && \
    echo '    let port = std::env::var("PORT")' >> src/main.rs && \
    echo '        .unwrap_or_else(|_| "8081".to_string())' >> src/main.rs && \
    echo '        .parse::<u16>()' >> src/main.rs && \
    echo '        .unwrap_or(8081);' >> src/main.rs && \
    echo '    ' >> src/main.rs && \
    echo '    info!("🌐 Starting HTTP server on {}:{}", host, port);' >> src/main.rs && \
    echo '' >> src/main.rs && \
    echo '    HttpServer::new(|| {' >> src/main.rs && \
    echo '        App::new()' >> src/main.rs && \
    echo '            .route("/health", web::get().to(|| async { ' >> src/main.rs && \
    echo '                HttpResponse::Ok().json(serde_json::json!({' >> src/main.rs && \
    echo '                    "status": "ok",' >> src/main.rs && \
    echo '                    "service": "Simple Test Server"' >> src/main.rs && \
    echo '                }))' >> src/main.rs && \
    echo '            }))' >> src/main.rs && \
    echo '            .route("/", web::get().to(|| async { ' >> src/main.rs && \
    echo '                HttpResponse::Ok().json(serde_json::json!({' >> src/main.rs && \
    echo '                    "message": "Simple test server is running!"' >> src/main.rs && \
    echo '                }))' >> src/main.rs && \
    echo '            }))' >> src/main.rs && \
    echo '    })' >> src/main.rs && \
    echo '    .bind((host, port))?' >> src/main.rs && \
    echo '    .run()' >> src/main.rs && \
    echo '    .await' >> src/main.rs && \
    echo '}' >> src/main.rs

# Build the application
RUN cargo build --release

# Runtime stage
FROM debian:bookworm-slim

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    ca-certificates \
    libssl3 \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Create non-root user
RUN useradd -r -s /bin/false app

# Set working directory
WORKDIR /app

# Copy binary from builder stage
COPY --from=builder /app/target/release/viworks-admin-backend /app/viworks-admin-backend

# Change ownership to non-root user
RUN chown -R app:app /app

# Switch to non-root user
USER app

# Expose port
EXPOSE 8081

# Run the application
CMD ["./viworks-admin-backend"]
