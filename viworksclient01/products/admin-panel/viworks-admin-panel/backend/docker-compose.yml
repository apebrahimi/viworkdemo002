version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: viworks_postgres
    environment:
      POSTGRES_DB: viworks_admin
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - viworks_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: viworks_redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6380:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - viworks_network

  # ViWorkS Admin Panel Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: viworks_backend
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/viworks_admin
      - REDIS_URL=redis://redis:6379
      - RUST_ENV=production
      - RUST_LOG=info
      - HOST=0.0.0.0
      - PORT=8080
      - JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
      - JWT_EXPIRATION=3600
      - BCRYPT_COST=12
      - MAX_LOGIN_ATTEMPTS=5
      - SESSION_TIMEOUT_MINUTES=60
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    networks:
      - viworks_network
    restart: unless-stopped

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: viworks_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
    networks:
      - viworks_network
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  viworks_network:
    driver: bridge
