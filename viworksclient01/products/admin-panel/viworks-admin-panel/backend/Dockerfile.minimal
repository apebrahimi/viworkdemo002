# Minimal working version
FROM rust:1.89.0-alpine as builder

# Install system dependencies
RUN apk add --no-cache \
    pkgconfig \
    openssl-dev \
    curl \
    

# Set working directory
WORKDIR /app

# Copy dependency files
COPY Cargo.toml ./

# Create a minimal main.rs for testing
RUN echo 'use actix_web::{App, HttpServer, web, HttpResponse};' > src/main.rs && \
    echo 'use tracing::{info};' >> src/main.rs && \
    echo 'use tracing_subscriber::{layer::SubscriberExt, util::SubscriberInitExt};' >> src/main.rs && \
    echo '' >> src/main.rs && \
    echo '#[actix_web::main]' >> src/main.rs && \
    echo 'async fn main() -> std::io::Result<()> {' >> src/main.rs && \
    echo '    tracing_subscriber::registry()' >> src/main.rs && \
    echo '        .with(tracing_subscriber::EnvFilter::new(' >> src/main.rs && \
    echo '            std::env::var("RUST_LOG").unwrap_or_else(|_| "info".into()),' >> src/main.rs && \
    echo '        ))' >> src/main.rs && \
    echo '        .with(tracing_subscriber::fmt::layer())' >> src/main.rs && \
    echo '        .init();' >> src/main.rs && \
    echo '' >> src/main.rs && \
    echo '    info!("🚀 Starting ViWorkS Admin Panel Backend (Minimal)");' >> src/main.rs && \
    echo '' >> src/main.rs && \
    echo '    let host = std::env::var("HOST").unwrap_or_else(|_| "0.0.0.0".to_string());' >> src/main.rs && \
    echo '    let port = std::env::var("PORT")' >> src/main.rs && \
    echo '        .unwrap_or_else(|_| "8081".to_string())' >> src/main.rs && \
    echo '        .parse::<u16>()' >> src/main.rs && \
    echo '        .unwrap_or(8081);' >> src/main.rs && \
    echo '    ' >> src/main.rs && \
    echo '    info!("🌐 Starting HTTP server on {}:{}", host, port);' >> src/main.rs && \
    echo '' >> src/main.rs && \
    echo '    HttpServer::new(|| {' >> src/main.rs && \
    echo '        App::new()' >> src/main.rs && \
    echo '            .route("/health", web::get().to(|| async { ' >> src/main.rs && \
    echo '                HttpResponse::Ok().json(serde_json::json!({' >> src/main.rs && \
    echo '                    "status": "ok",' >> src/main.rs && \
    echo '                    "service": "ViWorkS Admin Panel Backend",' >> src/main.rs && \
    echo '                    "version": "1.0.0"' >> src/main.rs && \
    echo '                }))' >> src/main.rs && \
    echo '            }))' >> src/main.rs && \
    echo '            .route("/", web::get().to(|| async { ' >> src/main.rs && \
    echo '                HttpResponse::Ok().json(serde_json::json!({' >> src/main.rs && \
    echo '                    "message": "ViWorkS Admin Panel Backend is running!"' >> src/main.rs && \
    echo '                }))' >> src/main.rs && \
    echo '            }))' >> src/main.rs && \
    echo '    })' >> src/main.rs && \
    echo '    .bind((host, port))?' >> src/main.rs && \
    echo '    .run()' >> src/main.rs && \
    echo '    .await' >> src/main.rs && \
    echo '}' >> src/main.rs

# Build the application
RUN cargo build --release

# Runtime stage
FROM alpine:3.22

# Install runtime dependencies
RUN apk add --no-cache \
    ca-certificates \
    libssl3 \
    curl \
    

# Create non-root user
RUN useradd -r -s /bin/false app

# Set working directory
WORKDIR /app

# Copy binary from builder stage
COPY --from=builder /app/target/release/viworks-admin-backend /app/viworks-admin-backend

# Change ownership to non-root user
RUN chown -R app:app /app

# Switch to non-root user
USER app

# Expose port
EXPOSE 8081

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:8081/health || exit 1

# Run the application
CMD ["./viworks-admin-backend"]

# Production stage - Use Alpine for minimal attack surface
FROM alpine:3.22 as production

# Install runtime dependencies
RUN apk add --no-cache \
    ca-certificates \
    libpq \
    dumb-init \
    && update-ca-certificates

# Create non-root user for security
RUN addgroup -g 1001 -S appgroup && \
    adduser -u 1001 -S appuser -G appgroup

WORKDIR /app

# Copy the binary from builder stage
COPY --from=builder /app/target/release/* /app/

# Change ownership to non-root user
RUN chown -R appuser:appgroup /app

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:8080/health || exit 1

# Use dumb-init for proper signal handling
ENTRYPOINT ["dumb-init", "--"]
CMD ["/app/viworks-backend"]
