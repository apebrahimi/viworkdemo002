# Build stage
FROM rust:1.89.0-alpine as builder

WORKDIR /app

# Install build dependencies
RUN apk add --no-cache \
    pkgconfig \
    openssl-dev \
    musl-dev \
    gcc

# Copy Cargo files first for better caching
COPY Cargo.toml Cargo.lock* ./

# Create a dummy main.rs to build dependencies
RUN mkdir src && echo "fn main() {}" > src/main.rs

# Build dependencies (warm cache)
RUN cargo build --release

# Remove dummy main.rs and copy real source
RUN rm src/main.rs
COPY src ./src

# Build the test application
RUN cargo build --release --bin viworks-admin-backend

# Runtime stage (Alpine)
FROM alpine:3.22

# Install runtime dependencies
RUN apk add --no-cache \
    ca-certificates \
    dumb-init \
    curl

WORKDIR /app

# Copy binary
COPY --from=builder /app/target/release/viworks-admin-backend /app/app

# Create non-root user
RUN adduser -D -u 10001 appuser && \
    chown -R appuser:appuser /app && \
    chmod +x /app/app

# Set environment variables
ENV RUST_LOG=info \
    RUST_BACKTRACE=1 \
    HOST=0.0.0.0 \
    PORT=8081 \
    TZ=UTC

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 8081

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -sfm 5 http://localhost:8081/health || exit 1

# Use dumb-init for proper signal handling
ENTRYPOINT ["/usr/bin/dumb-init", "--"]
CMD ["/app/app"]
