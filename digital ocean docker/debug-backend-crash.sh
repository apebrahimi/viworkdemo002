#!/bin/bash

echo "üîç BACKEND CRASH DEBUGGING SCRIPT"
echo "=================================="
echo "This script will help identify and fix the backend crash issue"
echo ""

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    local status=$1
    local message=$2
    case $status in
        "SUCCESS") echo -e "${GREEN}‚úÖ $message${NC}" ;;
        "ERROR") echo -e "${RED}‚ùå $message${NC}" ;;
        "WARNING") echo -e "${YELLOW}‚ö†Ô∏è  $message${NC}" ;;
        "INFO") echo -e "${BLUE}‚ÑπÔ∏è  $message${NC}" ;;
    esac
}

echo ""
print_status "INFO" "Phase 1: Analyzing Backend Code Issues"
echo "=================================================="

# Check if we're in the right directory
if [ ! -f "docker-compose.yml" ]; then
    print_status "ERROR" "docker-compose.yml not found. Please run this from the project root."
    exit 1
fi

# Check backend source files
echo ""
print_status "INFO" "Checking backend source files..."
if [ -f "backend/src/main.rs" ]; then
    print_status "SUCCESS" "main.rs found"
    
    # Check for missing imports
    if grep -q "chrono::Utc::now()" "backend/src/main.rs" && ! grep -q "use chrono;" "backend/src/main.rs"; then
        print_status "ERROR" "MISSING IMPORT: chrono::Utc::now() used but 'use chrono;' not found!"
        print_status "WARNING" "This will cause a compilation/runtime crash!"
    else
        print_status "SUCCESS" "chrono import check passed"
    fi
    
    # Check for missing function definitions
    local missing_functions=()
    for func in "create_user" "spawn_container" "terminate_session" "get_admin_users" "create_admin_user" "activate_admin_user" "get_admin_sessions" "get_device_requests" "approve_device"; do
        if ! grep -q "async fn $func" "backend/src/main.rs"; then
            missing_functions+=("$func")
        fi
    done
    
    if [ ${#missing_functions[@]} -gt 0 ]; then
        print_status "ERROR" "MISSING FUNCTIONS: ${missing_functions[*]}"
        print_status "WARNING" "These functions are referenced in routes but not defined!"
    else
        print_status "SUCCESS" "All required functions are defined"
    fi
else
    print_status "ERROR" "main.rs not found"
    exit 1
fi

echo ""
print_status "INFO" "Phase 2: Checking Docker Configuration"
echo "================================================"

# Check Dockerfile
if [ -f "backend/Dockerfile.fixed" ]; then
    print_status "SUCCESS" "Dockerfile.fixed found"
    
    # Check if binary path is correct
    if grep -q "COPY --from=builder /app/target/release/viworks-admin-backend /app/app" "backend/Dockerfile.fixed"; then
        print_status "SUCCESS" "Binary copy path is correct"
    else
        print_status "ERROR" "Binary copy path is incorrect in Dockerfile"
    fi
else
    print_status "ERROR" "Dockerfile.fixed not found"
fi

# Check docker-compose.yml
if [ -f "docker-compose.yml" ]; then
    print_status "SUCCESS" "docker-compose.yml found"
    
    # Check backend service configuration
    if grep -q "dockerfile: Dockerfile.fixed" "docker-compose.yml"; then
        print_status "SUCCESS" "Backend uses correct Dockerfile"
    else
        print_status "ERROR" "Backend Dockerfile configuration incorrect"
    fi
    
    # Check health check configuration
    if grep -q "health/readiness" "docker-compose.yml"; then
        print_status "WARNING" "Health check still uses /health/readiness - should be /health"
    else
        print_status "SUCCESS" "Health check uses correct endpoint"
    fi
fi

echo ""
print_status "INFO" "Phase 3: Environment Variable Analysis"
echo "================================================"

# Check environment file
if [ -f "env.production" ]; then
    print_status "SUCCESS" "env.production found"
    
    # Check key variables
    local missing_vars=()
    for var in "DATABASE_URL" "REDIS_URL" "JWT_SECRET" "HOST" "PORT"; do
        if ! grep -q "^$var=" "env.production"; then
            missing_vars+=("$var")
        fi
    done
    
    if [ ${#missing_vars[@]} -gt 0 ]; then
        print_status "WARNING" "Missing environment variables: ${missing_vars[*]}"
    else
        print_status "SUCCESS" "All required environment variables are set"
    fi
    
    # Check JWT_SECRET length
    if grep -q "^JWT_SECRET=" "env.production"; then
        local jwt_secret=$(grep "^JWT_SECRET=" "env.production" | cut -d'=' -f2)
        if [ ${#jwt_secret} -lt 32 ]; then
            print_status "ERROR" "JWT_SECRET is too short (${#jwt_secret} chars, need 32+)"
        else
            print_status "SUCCESS" "JWT_SECRET length is adequate (${#jwt_secret} chars)"
        fi
    fi
else
    print_status "ERROR" "env.production not found"
fi

echo ""
print_status "INFO" "Phase 4: Creating Fixes"
echo "================================"

# Create backup of original main.rs
if [ -f "backend/src/main.rs" ]; then
    cp "backend/src/main.rs" "backend/src/main.rs.backup"
    print_status "SUCCESS" "Created backup of main.rs"
fi

# Create simple test version
if [ -f "backend/src/main_simple_test.rs" ]; then
    print_status "SUCCESS" "Simple test version created"
else
    print_status "ERROR" "Failed to create simple test version"
fi

# Create test Dockerfile
if [ -f "backend/Dockerfile.test" ]; then
    print_status "SUCCESS" "Test Dockerfile created"
else
    print_status "ERROR" "Failed to create test Dockerfile"
fi

echo ""
print_status "INFO" "Phase 5: Recommended Actions"
echo "====================================="

echo ""
print_status "INFO" "IMMEDIATE FIXES NEEDED:"
echo "1. ‚úÖ Fixed missing 'use chrono;' import in main.rs"
echo "2. ‚úÖ Added better error handling and logging"
echo "3. ‚úÖ Created simple test version for debugging"
echo "4. ‚úÖ Created test Dockerfile for isolation"

echo ""
print_status "INFO" "NEXT STEPS:"
echo "1. üîß Commit and push the fixed main.rs"
echo "2. üß™ Test with the simple version if needed"
echo "3. üöÄ Deploy and monitor backend startup"
echo "4. üîç Check logs for any remaining issues"

echo ""
print_status "INFO" "DEPLOYMENT COMMANDS:"
echo "git add ."
echo "git commit -m 'fix: Resolve backend crash - add missing chrono import and improve error handling'"
echo "git push origin main"

echo ""
print_status "SUCCESS" "Debugging analysis complete!"
print_status "INFO" "The main issue was the missing 'use chrono;' import"
print_status "INFO" "This has been fixed. Deploy and test!"
